buildscript {

  ext {
    kotlinVersion = "1.0.6"
    springBootVersion = "1.4.3.RELEASE"
    jacksonVersion = "2.8.5"
    jjwtVersion = "0.7.0"
    gradleNodePluginVersion = "1.0.1"
    reflectionsVersion = "0.9.10"
  }

  repositories {
    mavenCentral()
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }

  dependencies {
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
    classpath "com.moowork.gradle:gradle-node-plugin:${gradleNodePluginVersion}"
    classpath "org.jetbrains.kotlin:kotlin-noarg:$kotlinVersion"
    classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlinVersion"
  }
}

repositories {
  mavenCentral()
}

apply plugin: "idea"
apply plugin: "eclipse"
apply plugin: "java"
apply plugin: "kotlin"
apply plugin: "kotlin-kapt"
apply plugin: "kotlin-allopen"
apply plugin: "kotlin-spring"
apply plugin: "kotlin-noarg"
apply plugin: "kotlin-jpa"
apply plugin: "org.springframework.boot"
apply plugin: "com.moowork.node"
apply plugin: "jacoco"

group = "com.shardis"
version = "0.0.2-SNAPSHOT"

sourceCompatibility = 1.8
targetCompatibility = 1.8

node {
  version = "6.9.4"
  yarnVersion = "0.18.1"
  download = true
  workDir = file("${project.buildDir}/nodejs")
  yarnWorkDir = file("${project.buildDir}/yarn")
  nodeModulesDir = file("${project.projectDir}")
}

jar {
  baseName = "shardis"
}

jacocoTestReport {
  dependsOn "test"
  reports {
    html.enabled = true
    xml.enabled = true
    html.destination = "${project.buildDir}/jacocoHtml"
  }
}

processResources {
  filesMatching("**/application.yml") {
    expand(project.properties)
  }
  filesMatching("**/bootstrap.yml") {
    expand(project.properties)
  }
}

test {
  testLogging {
    events "passed", "skipped", "failed", "standardOut", "standardError"
  }
}

sourceSets.main.java.srcDir file("$buildDir/generated/source/kapt/")

idea {
  module {
    generatedSourceDirs += file("$buildDir/generated/source/kapt/")
  }
}

check.finalizedBy "jacocoTestReport"

task ngBuild(type: YarnTask) {
  args = ["run", "build:prod"]
}

task ngTest(type: YarnTask) {
  args = ["run", "test:phantom"]
}

yarn_install.dependsOn yarnSetup

ngBuild.dependsOn yarn_install
ngTest.dependsOn yarn_install

processResources.dependsOn ngBuild
test.dependsOn ngTest

clean.delete << file("node_modules")

configurations {
  compile.exclude group: "org.springframework.boot", module: "spring-boot-starter-tomcat"
}

dependencies {
  compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
  compile "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"

  compile "org.springframework.boot:spring-boot-devtools"
  compile "org.springframework.boot:spring-boot-starter-actuator"
  compile "org.springframework.boot:spring-boot-starter-cache"
  compile "org.springframework.boot:spring-boot-starter-data-jpa"
  compile "org.springframework.boot:spring-boot-starter-security"
  compile "org.springframework.boot:spring-boot-starter-undertow"
  compile "org.springframework.boot:spring-boot-starter-validation"
  compile "org.springframework.boot:spring-boot-starter-web"
  compile "org.springframework.boot:spring-boot-configuration-processor"

  compile "org.hibernate:hibernate-java8"
  compile "org.hibernate:hibernate-envers"

  kapt "org.springframework.boot:spring-boot-configuration-processor"
  kapt "org.hibernate:hibernate-jpamodelgen"

  compile "io.jsonwebtoken:jjwt:${jjwtVersion}"

  compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
  compile "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
  compile "com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonVersion"

  runtime("com.h2database:h2")
  runtime("org.postgresql:postgresql")

  testCompile "org.springframework.boot:spring-boot-starter-test"
  testCompile "org.springframework.security:spring-security-test"
  testCompile "org.reflections:reflections:${reflectionsVersion}"
}
